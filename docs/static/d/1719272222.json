{"data":{"site":{"siteMetadata":{"testTemplate":"success <- function(text) {\n    cat(paste(\"\\033[32m\", text, \"\\033[0m\", sep = \"\"))\n}\n\n.solution <- \"${solutionEscaped}\"\n\n${solution}\n\n${test}\ntryCatch({\n    test()\n}, error = function(e) {\n    cat(paste(\"\\033[31m\", e[1], \"\\033[0m\", sep = \"\"))\n})","juniper":{"repo":"noamross/gam-in-r-course","branch":"master","kernelType":"ir","lang":"r","debug":false}}},"allCode":{"edges":[{"node":{"name":"exc_01_04","code":"library(mgcv)\r\n\r\nmcycle <- MASS::mcycle\r\ngam_mod <- mgcv::gam(accel ~ s(times), data=mcycle)\r\n\r\n# Extract the model coefficients\r\ncoef(____)"}},{"node":{"name":"exc_01_03","code":"mcycle <- MASS::mcycle\r\n\r\n# Load mgcv\r\n___\r\n\r\n# Fit the model\r\ngam_mod <- gam(___ ~ s(___), data = mcycle)\r\n\r\n# Plot the results\r\nplot(gam_mod, residuals = TRUE, pch = 1)"}},{"node":{"name":"exc_01_06","code":"mcycle <- MASS::mcycle\r\n\r\nlibrary(mgcv)\r\n\r\n# Fit a GAM with 3 basis functions\r\ngam_mod_k3 <- gam(accel ~ s(times, k = ___), data = mcycle)\r\n\r\n# Fit with 20 basis functions\r\ngam_mod_k20 <- gam(___)\r\n\r\n# Visualize the GAMs\r\npar(mfrow = c(1, 2))\r\nplot(gam_mod_k3, residuals = TRUE, pch = 1)\r\nplot(gam_mod_k20, residuals = TRUE, pch = 1)"}},{"node":{"name":"exc_01_02","code":"mcycle <- MASS::mcycle\r\n\r\n# Examine the mcycle data frame\r\nhead(___)\r\nplot(___)\r\n\r\n# Fit a linear model\r\nlm_mod <- lm(___, data = mcycle)\r\n\r\n# Visualize the model\r\ntermplot(lm_mod, partial.resid = TRUE, se = TRUE)"}},{"node":{"name":"exc_01_07","code":"mcycle <- MASS::mcycle\r\n\r\nlibrary(mgcv)\r\n\r\n# Extract the smoothing parameter\r\ngam_mod <- gam(accel ~ s(times), data = mcycle, method = \"REML\")\r\n___\r\n\r\n# Fix the smoothing parameter at 0.1\r\ngam_mod_s1 <- gam(accel ~ s(times), data = mcycle, sp = ___)\r\n\r\n# Fix the smoothing parameter at 0.0001\r\ngam_mod_s2 <- gam(___)\r\n\r\n# Plot both models\r\npar(mfrow = c(2, 1))\r\nplot(gam_mod_s1, residuals = TRUE, pch = 1)\r\nplot(gam_mod_s2, residuals = TRUE, pch = 1)"}},{"node":{"name":"exc_01_08","code":"mcycle <- MASS::mcycle\r\n\r\nlibrary(mgcv)\r\n\r\n# Fit the GAM\r\ngam_mod_sk <- ___\r\n\r\n# Visualize the model\r\nplot(gam_mod_sk, residuals = TRUE, pch = 1)"}},{"node":{"name":"exc_01_10","code":"library(gamair)\r\ndata(\"mpg\", package=\"gamair\")\r\n\r\nlibrary(mgcv)\r\n\r\n# Examine the data\r\n___\r\n___\r\n\r\n# Fit the model\r\nmod_city <- gam(city.mpg ~ ___, \r\n                data = mpg, method = \"REML\")\r\n\r\n# Plot the model\r\nplot(mod_city, pages = 1)"}},{"node":{"name":"exc_01_11","code":"library(gamair)\r\ndata(\"mpg\", package=\"gamair\")\r\n\r\nlibrary(mgcv)\r\n\r\n# Fit the model\r\nmod_city2 <- gam(city.mpg ~ s(weight) + s(length) + s(price) ___, \r\n                 data = mpg, method = \"REML\")\r\n\r\n# Plot the model\r\nplot(mod_city2, all.terms = TRUE, pages = 1)"}},{"node":{"name":"exc_02_06","code":"library(gamair)\r\ndata(\"mpg\", package=\"gamair\")\r\n\r\nlibrary(mgcv)\r\n# Fit the model\r\nmod <- gam(hw.mpg ~ s(weight) + s(rpm) + s(price) + comp.ratio, \r\n           data = mpg, method = \"REML\")\r\n\r\n# Plot the price effect\r\n___\r\n\r\n# Plot all effects\r\n___"}},{"node":{"name":"exc_02_05","code":"mcycle <- MASS::mcycle\r\n\r\nlibrary(mgcv)\r\n# Fit the model\r\nmod <- gam(accel ~ s(times), data = mcycle, method = \"REML\")\r\n\r\n# Make the plot with residuals\r\nplot(mod, ___)\r\n\r\n# Change shape of residuals\r\n___"}},{"node":{"name":"exc_01_12","code":"library(gamair)\r\ndata(\"mpg\", package=\"gamair\")\r\n\r\nlibrary(mgcv)\r\n\r\n# Fit the model\r\nmod_city3 <- gam(city.mpg ~ ___, \r\n                 data = mpg, method = \"REML\")\r\n\r\n# Plot the model\r\nplot(mod_city3, pages = 1)"}},{"node":{"name":"exc_02_12","code":"library(mgcv)\r\n# Fit the model\r\nmod <- gam(hw.mpg ~ s(length) + s(width) + s(height) + s(weight), \r\n           data = mpg, method = \"REML\")\r\n\r\n# Check overall concurvity\r\n___\r\n\r\n"}},{"node":{"name":"exc_02_09","code":"library(mgcv)\r\n# Fit the model\r\nmod <- gam(y ~ s(x0, k = 5) + s(x1, k = 5) + s(x2, k = 5) + s(x3, k = 5),\r\n           data = dat, method = \"REML\")\r\n\r\n# Run the check function\r\n___"}},{"node":{"name":"exc_02_07","code":"library(gamair)\r\ndata(\"mpg\", package=\"gamair\")\r\n\r\nlibrary(mgcv)\r\n# Fit the model\r\nmod <- gam(hw.mpg ~ s(weight) + s(rpm) + s(price) + comp.ratio, \r\n           data = mpg, method = \"REML\")\r\n\r\n# Plot the weight effect with colored shading\r\nplot(mod, select = 1, ___)\r\n\r\n# Make another plot adding the intercept value and uncertainty\r\nplot(mod, select = 1, ___)\r\n\r\n"}},{"node":{"name":"exc_02_10","code":"set.seed(0)\r\ndat <- mgcv::gamSim(1,n=600, scale=0.6, verbose=FALSE)\r\nmod <- mgcv::gam(y ~ s(x0, k = 3) + s(x1, k=3) + s(x2, k=3) +s (x3, k=3),\r\n           data=dat, method = \"REML\")\r\n\r\nlibrary(mgcv)\r\n# Fit the model\r\nmod <- gam(y ~ s(x0, k = 3) + s(x1, k = 3) + s(x2, k = 3) + s(x3, k = 3),\r\n           data = dat, method = \"REML\")\r\n\r\n# Check the diagnostics\r\n___\r\n\r\n# Refit to fix issues\r\nmod2 <- gam(y ~ s(x0, k = ___) + s(x1, k = ___) + s(x2, k = ___) + s(x3, k = ___),\r\n           data = dat, method = \"REML\")\r\n\r\n# Check the new model\r\n___\r\n"}},{"node":{"name":"exc_02_13","code":"library(mgcv)\r\nlibrary(gamair)\r\nset.seed(0)\r\ndata(\"mpg\", package=\"gamair\", verbose=FALSE)\r\nmod <- mgcv::gam(hw.mpg ~ s(length) + s(width) + s(height) + s(weight), data=mpg, method=\"REML\")\r\n\r\nlibrary(mgcv)\r\n# Fit the model\r\nmod <- gam(hw.mpg ~ s(length) + s(width) + s(height) + s(weight), \r\n           data = mpg, method = \"REML\")\r\n\r\n# Check pairwise concurvity\r\n___\r\n\r\n"}},{"node":{"name":"exc_03_02","code":"library(mgcv)\r\ndata(meuse, package=\"sp\")\r\n#mod2d <- mgcv::gam(cadmium ~ s(x,y), data=meuse, method = \"REML\")\r\n\r\n# Inspect the data\r\n___\r\n___\r\n\r\n"}},{"node":{"name":"exc_03_02_1","code":"library(mgcv)\r\ndata(meuse, package=\"sp\")\r\n\r\n# Fit the model\r\nmod2da <- gam(cadmium ~ s(x, y) ___, \r\n              data = meuse, method = \"REML\")\r\n\r\n# Inspect the model\r\nsummary(mod2da)\r\n\r\n"}},{"node":{"name":"exc_03_03","code":"library(mgcv)\r\ndata(meuse, package=\"sp\")\r\n\r\n# Fit the model\r\nmod2da <- gam(cadmium ~ s(x, y) ___, \r\n              data = meuse, method = \"REML\")\r\n\r\n# Inspect the model\r\nsummary(mod2da)\r\n"}},{"node":{"name":"exc_03_05","code":"# Contour plot\r\n___(___, pages = 1)\r\n\r\n"}},{"node":{"name":"exc_03_05_2","code":"# Colored heat map\r\nplot(mod2da, ___, ___)\r\n"}},{"node":{"name":"exc_03_06_1","code":"# Rotate the same plot\r\nvis.gam(mod2d, ___)\r\n"}},{"node":{"name":"exc_03_06","code":"data(meuse, package=\"sp\")\r\nlibrary(mgcv)\r\nmod2d <- gam(cadmium ~ s(x,y), data=meuse, method = \"REML\")\r\n\r\n# Make the perspective plot with error surfaces\r\nvis.gam(mod2d, view = c(\"x\", \"y\"), \r\n        ___)\r\n\r\n"}},{"node":{"name":"exc_03_06_2","code":"# Rotate the same plot\r\nvis.gam(mod2d, ___)\r\n\r\n"}},{"node":{"name":"exc_03_05_1","code":"# 3D surface plot\r\n___(mod2da, ___, pages = 1)\r\n"}},{"node":{"name":"exc_03_07_1","code":"# Make plot with 10% extrapolation\r\nvis.gam(mod2d, view = c(\"x\", \"y\"), ___, ___)\r\n\r\n# Overlay data\r\npoints(meuse)"}},{"node":{"name":"exc_03_07","code":"data(meuse, package=\"sp\")\r\nlibrary(mgcv)\r\nmod2d <- gam(cadmium ~ s(x,y), data=meuse, method = \"REML\")\r\n\r\n# Make plot with 5% extrapolation\r\nvis.gam(mod2d, view = c(\"x\", \"y\"), \r\n        plot.type = \"contour\", ___)\r\n\r\n# Overlay data\r\npoints(meuse)\r\n\r\n"}},{"node":{"name":"exc_03_07_2","code":"# Make plot with 25% extrapolation\r\nvis.gam(mod2d, view = c(\"x\", \"y\"), \r\n        plot.type = \"contour\", too.far = ___)\r\n\r\n# Overlay data\r\n___\r\n\r\n"}},{"node":{"name":"exc_03_09_1","code":"# Fit a model with a factor-smooth interaction\r\nmod_fs <- ___\r\n\r\n# Examine the summary\r\n___\r\n"}},{"node":{"name":"exc_03_09","code":"library(mgcv)\r\ndata(meuse, package=\"sp\")\r\n\r\n# Fit a model with separate smooths for each land-use level\r\nmod_sep <- ___\r\n\r\n# Examine the summary\r\n___\r\n"}},{"node":{"name":"exc_03_10_1","code":"# Plot both the models with vis.gam()\r\n___(mod_sep, view = c(\"dist\", \"landuse\"), plot.type = ___)\r\n___(mod_fs, view = c(\"dist\", \"landuse\"), plot.type = \"persp\")\r\n\r\n"}},{"node":{"name":"exc_03_10","code":"data(meuse, package=\"sp\")\r\nlibrary(mgcv)\r\nmod_sep <- gam(copper ~ s(dist, by=landuse), data=meuse, method = \"REML\")\r\nmod_fs <- gam(copper ~ s(dist, landuse, bs=\"fs\"), data=meuse, method = \"REML\")\r\n\r\n# Plot both the models with plot()\r\n___\r\n___\r\n\r\n"}},{"node":{"name":"exc_03_13","code":"library(mgcv)\r\ndata(meuse, package=\"sp\")\r\n\r\n# Fit the model\r\ntensor_mod2 <- ___\r\n\r\n\r\n# Summarize and plot\r\n___\r\n___(___, pages = 1)\r\n\r\n"}},{"node":{"name":"exc_04_02","code":"library(mgcv)\r\ncsale <- readRDS(url(\"https://assets.datacamp.com/production/repositories/1786/datasets/cad8c6b369fb6bfbdbae6b17c01df88e1bd336c4/csale.rds\"))\r\nlog_mod <- gam(purchase ~ s(mortgage_age), data = csale, \r\n               family = binomial, \r\n               method = \"REML\")\r\n\t\t\t   \r\n# Examine the csale data frame\r\nhead(csale)\r\nstr(csale)\r\n\r\n# Fit a logistic model\r\nlog_mod <- gam(___, data = csale, \r\n               ___, \r\n               method = \"REML\")\r\n"}},{"node":{"name":"exc_03_12","code":"library(mgcv)\r\ndata(meuse, package=\"sp\")\r\n\r\n# Fit the model\r\ntensor_mod <- ___\r\n\r\n# Summarize and plot\r\n___\r\n___\r\n\r\n"}},{"node":{"name":"exc_04_05","code":"csale <- readRDS(url(\"https://assets.datacamp.com/production/repositories/1786/datasets/cad8c6b369fb6bfbdbae6b17c01df88e1bd336c4/csale.rds\"))\r\nset.seed(0)\r\nlibrary(mgcv)\r\nlog_mod2 <- gam(purchase ~ s(n_acts) + s(bal_crdt_ratio) +\r\n                \t\t   s(avg_prem_balance) + s(retail_crdt_ratio) +\r\n                           s(avg_fin_balance)  + s(mortgage_age) + s(cred_limit),\r\n              data = csale,\r\n              family = binomial,\r\n              method = \"REML\")\r\n\r\n# Plot on the log-odds scale\r\n___\t\t\t  "}},{"node":{"name":"exc_04_03","code":"csale <- readRDS(url(\"https://assets.datacamp.com/production/repositories/1786/datasets/cad8c6b369fb6bfbdbae6b17c01df88e1bd336c4/csale.rds\"))\r\nlibrary(mgcv)\r\nlog_mod2 <- gam(purchase ~ s(n_acts) + s(bal_crdt_ratio) + s(avg_prem_balance) + s(retail_crdt_ratio) + s(avg_fin_balance)  + s(mortgage_age) + s(cred_limit),\r\n              data = csale,\r\n              family = binomial,\r\n              method = \"REML\")\r\n\t\t\t  \r\n# Fit a logistic model\r\nlog_mod2 <- gam(___,\r\n                data = csale,\r\n                family = binomial,\r\n                method = \"REML\")\r\n\r\n# View the summary\r\n___\r\n\r\n"}},{"node":{"name":"exc_04_05_1","code":"# Plot on the probability scale\r\nplot(log_mod2, pages = 1, trans = ___)\r\n\r\n\r\n"}},{"node":{"name":"exc_04_05_3","code":"# Plot with intercept uncertainty\r\nplot(log_mod2, pages = 1, trans = plogis, \r\n     shift = coef(log_mod2)[1], seWithMean = ___)\r\n"}},{"node":{"name":"exc_04_05_2","code":"# Plot with the intercept\r\nplot(log_mod2, pages = 1, trans = plogis, \r\n     shift = ___)\r\n"}},{"node":{"name":"exc_04_11","code":"library(mgcv)\r\ncsale <- readRDS(url(\"https://assets.datacamp.com/production/repositories/1786/datasets/3331154338220d6597187e3c7bc1e5b7ec064858/csale.rds\"))\r\nnew_credit_data <- readRDS(url(\"https://assets.datacamp.com/production/repositories/1786/datasets/c76599b99a7f00c8b7f74ca7765b2186216b0dde/new_credit_data.rds\"))\r\nlog_mod2 <- gam(purchase ~ s(n_acts) + s(bal_crdt_ratio) +\r\n                \t\t   s(avg_prem_balance) + s(retail_crdt_ratio) +\r\n                           s(avg_fin_balance)  + s(mortgage_age) + s(cred_limit),\r\n              data = csale,\r\n              family = binomial,\r\n              method = \"REML\")\r\n# Predict from the model\r\nprediction_1 <- ___(log_mod2, \r\n                        newdata = ___, \r\n                        type = ___)\r\n\r\n# Inspect\r\nprediction_1\r\n"}},{"node":{"name":"exc_04_10","code":"library(mgcv)\r\ncsale <- readRDS(url(\"https://assets.datacamp.com/production/repositories/1786/datasets/3331154338220d6597187e3c7bc1e5b7ec064858/csale.rds\"))\r\nnew_credit_data <- readRDS(url(\"https://assets.datacamp.com/production/repositories/1786/datasets/c76599b99a7f00c8b7f74ca7765b2186216b0dde/new_credit_data.rds\"))\r\nlog_mod2 <- gam(purchase ~ s(n_acts) + s(bal_crdt_ratio) +\r\n                \t\t   s(avg_prem_balance) + s(retail_crdt_ratio) +\r\n                           s(avg_fin_balance)  + s(mortgage_age) + s(cred_limit),\r\n              data = csale,\r\n              family = binomial,\r\n              method = \"REML\")\r\n\t\t\t  \r\n# Calculate predictions and errors\r\npredictions <- ___(log_mod2, newdata = ___, \r\n                       type = ___, se.fit = ___)\r\n\r\n# Inspect the predictions\r\npredictions\r\n\r\n"}},{"node":{"name":"exc_04_10_1","code":"# Calculate predictions and errors\r\npredictions <- predict(log_mod2, newdata = new_credit_data, \r\n                       type = \"link\", se.fit = TRUE)\r\n\r\n# Calculate high and low prediction intervals\r\nhigh_pred <- ___\r\nlow_pred <- ___\r\n"}},{"node":{"name":"solution_01_02","code":"mcycle <- MASS::mcycle\r\n\r\n# Examine the mcycle data frame\r\nhead(mcycle)\r\nplot(mcycle)\r\n\r\n# Fit a linear model\r\nlm_mod <- lm(accel ~ times, data = mcycle)\r\n\r\n# Visualize the model\r\ntermplot(lm_mod, partial.resid = TRUE, se = TRUE)"}},{"node":{"name":"solution_01_03","code":"mcycle <- MASS::mcycle\r\n\r\n# Load mgcv\r\nlibrary(mgcv)\r\n\r\n# Fit the model\r\ngam_mod <- gam(accel ~ s(times), data = mcycle)\r\n\r\n# Plot the results\r\nplot(gam_mod, residuals = TRUE, pch = 1)"}},{"node":{"name":"exc_04_10_2","code":"# Calculate predictions and errors\r\npredictions <- predict(log_mod2, newdata = new_credit_data, \r\n                       type = \"link\", se.fit = TRUE)\r\n\r\n# Calculate high and low predictions intervals\r\nhigh_pred <- predictions$fit + 2*predictions$se.fit\r\nlow_pred <- predictions$fit - 2*predictions$se.fit\r\n\r\n# Convert intervals to probability scale\r\nhigh_prob <- ___\r\nlow_prob <- ___\r\n\r\n# Inspect\r\nhigh_prob\r\nlow_prob\r\n"}},{"node":{"name":"solution_01_04","code":"library(mgcv)\r\n\r\nmcycle <- MASS::mcycle\r\ngam_mod <- mgcv::gam(accel ~ s(times), data=mcycle)\r\n\r\n# Extract the model coefficients\r\ncoef(gam_mod)"}},{"node":{"name":"solution_01_07","code":"mcycle <- MASS::mcycle\r\n\r\nlibrary(mgcv)\r\n\r\n# Extract the smoothing parameter\r\ngam_mod <- gam(accel ~ s(times), data = mcycle, method = \"REML\")\r\ngam_mod$sp\r\n\r\n# Fix the smoothing parameter at 0.1\r\ngam_mod_s1 <- gam(accel ~ s(times), data = mcycle, sp = 0.1)\r\n\r\n# Fix the smoothing parameter at 0.0001\r\ngam_mod_s2 <- gam(accel ~ s(times), data = mcycle, sp = 0.0001)\r\n\r\n# Plot both models\r\npar(mfrow = c(2, 1))\r\nplot(gam_mod_s1, residuals = TRUE, pch = 1)\r\nplot(gam_mod_s2, residuals = TRUE, pch = 1)"}},{"node":{"name":"solution_01_08","code":"mcycle <- MASS::mcycle\r\n\r\nlibrary(mgcv)\r\n\r\n# Fit the GAM\r\ngam_mod_sk <- gam(accel ~ s(times, k = 50), data = mcycle, sp = 0.0001)\r\n\r\n# Visualize the model\r\nplot(gam_mod_sk, residuals = TRUE, pch = 1)"}},{"node":{"name":"solution_01_06","code":"mcycle <- MASS::mcycle\r\n\r\nlibrary(mgcv)\r\n\r\n# Fit a GAM with 3 basis functions\r\ngam_mod_k3 <- gam(accel ~ s(times, k = 3), data = mcycle)\r\n\r\n# Fit with 20 basis functions\r\ngam_mod_k20 <- gam(accel ~ s(times, k = 20), data = mcycle)\r\n\r\n# Visualize the GAMs\r\npar(mfrow = c(1, 2))\r\nplot(gam_mod_k3, residuals = TRUE, pch = 1)\r\nplot(gam_mod_k20, residuals = TRUE, pch = 1)"}},{"node":{"name":"solution_01_10","code":"library(gamair)\r\ndata(\"mpg\", package=\"gamair\")\r\n\r\nlibrary(mgcv)\r\n\r\n# Examine the data\r\nhead(mpg)\r\nstr(mpg)\r\n\r\n# Fit the model\r\nmod_city <- gam(city.mpg ~ s(weight) + s(length) + s(price), \r\n                data = mpg, method = \"REML\")\r\n\r\n# Plot the model\r\nplot(mod_city, pages = 1)"}},{"node":{"name":"solution_01_11","code":"library(gamair)\r\ndata(\"mpg\", package=\"gamair\")\r\n\r\nlibrary(mgcv)\r\n\r\n# Fit the model\r\nmod_city2 <- gam(city.mpg ~ s(weight) + s(length) + s(price) + fuel + drive + style,\r\n                 data = mpg, method = \"REML\")\r\n\r\n# Plot the model\r\nplot(mod_city2, all.terms = TRUE, pages = 1)"}},{"node":{"name":"solution_01_12","code":"library(gamair)\r\ndata(\"mpg\", package=\"gamair\")\r\n\r\nlibrary(mgcv)\r\n\r\n# Fit the model\r\nmod_city3 <- gam(city.mpg ~ s(weight, by = drive) + s(length, by = drive) + s(price, by = drive) + drive,\r\n                 data = mpg, method = \"REML\")\r\n\r\n# Plot the model\r\nplot(mod_city3, pages = 1)\r\n"}},{"node":{"name":"solution_02_02","code":"library(mgcv)\r\n# Fit the model\r\nmod_city4 <- gam(city.mpg ~ s(weight) + s(length) + s(price) + s(rpm) + s(width),\r\n                 data = mpg, method = \"REML\")\r\n\r\n# View the summary\r\nsummary(mod_city4)"}},{"node":{"name":"solution_02_06","code":"library(gamair)\r\ndata(\"mpg\", package=\"gamair\")\r\n\r\nlibrary(mgcv)\r\n# Fit the model\r\nmod <- gam(hw.mpg ~ s(weight) + s(rpm) + s(price) + comp.ratio, \r\n           data = mpg, method = \"REML\")\r\n\r\n# Plot the price effect\r\nplot(mod, select = 3)\r\n\r\n# Plot all effects\r\nplot(mod, pages = 1, all.terms = TRUE)"}},{"node":{"name":"solution_02_05","code":"mcycle <- MASS::mcycle\r\n\r\nlibrary(mgcv)\r\n# Fit the model\r\nmod <- gam(accel ~ s(times), data = mcycle, method = \"REML\")\r\n\r\n# Make the plot with residuals\r\nplot(mod, residuals = TRUE)\r\n\r\n# Change shape of residuals\r\nplot(mod, residuals = TRUE, pch = 1, cex = 1)"}},{"node":{"name":"solution_02_07","code":"library(gamair)\r\ndata(\"mpg\", package=\"gamair\")\r\n\r\nlibrary(mgcv)\r\n# Fit the model\r\nmod <- gam(hw.mpg ~ s(weight) + s(rpm) + s(price) + comp.ratio, \r\n           data = mpg, method = \"REML\")\r\n\r\n# Plot the weight effect\r\nplot(mod, select = 1, shade = TRUE, shade.col = \"hotpink\")\r\n\r\n# Make another plot adding the intercept value and uncertainty\r\nplot(mod, select = 1, shade = TRUE, shade.col = \"hotpink\", \r\n     shift = coef(mod)[1], seWithMean = TRUE)"}},{"node":{"name":"solution_02_09","code":"library(mgcv)\r\n# Fit the model\r\nmod <- gam(y ~ s(x0, k = 5) + s(x1, k = 5) + s(x2, k = 5) + s(x3, k = 5),\r\n           data = dat, method = \"REML\")\r\n\r\n# Run the check function\r\ngam.check(mod)"}},{"node":{"name":"solution_02_10","code":"set.seed(0)\r\ndat <- mgcv::gamSim(1,n=600, scale=0.6, verbose=FALSE)\r\nmod <- mgcv::gam(y ~ s(x0, k = 3) + s(x1, k=3) + s(x2, k=3) +s (x3, k=3),\r\n           data=dat, method = \"REML\")\r\n\r\nlibrary(mgcv)\r\n# Fit the model\r\nmod <- gam(y ~ s(x0, k = 3) + s(x1, k = 3) + s(x2, k = 3) + s(x3, k = 3),\r\n           data = dat, method = \"REML\")\r\n\r\n# Check the diagnostics\r\ngam.check(mod)\r\n\r\n# Refit to fix issues\r\nmod2 <- gam(y ~ s(x0, k = 3) + s(x1, k = 3) + s(x2, k = 10) + s(x3, k = 3),\r\n           data = dat, method = \"REML\")\r\n\r\n# Check the new model\r\ngam.check(mod2)\r\n"}},{"node":{"name":"solution_02_12","code":"library(mgcv)\r\n# Fit the model\r\nmod <- gam(hw.mpg ~ s(length) + s(width) + s(height) + s(weight), \r\n           data = mpg, method = \"REML\")\r\n\r\n# Check overall concurvity\r\nconcurvity(mod, full = TRUE)"}},{"node":{"name":"solution_03_02","code":"library(mgcv)\r\ndata(meuse, package=\"sp\")\r\n#mod2d <- mgcv::gam(cadmium ~ s(x,y), data=meuse, method = \"REML\")\r\n\r\n# Inspect the data\r\nhead(meuse)\r\nstr(meuse)"}},{"node":{"name":"solution_03_05","code":"# Contour plot\r\nplot(mod2da, pages = 1)\r\n"}},{"node":{"name":"solution_02_13","code":"library(mgcv)\r\nlibrary(gamair)\r\nset.seed(0)\r\ndata(\"mpg\", package=\"gamair\", verbose=FALSE)\r\nmod <- mgcv::gam(hw.mpg ~ s(length) + s(width) + s(height) + s(weight), data=mpg, method=\"REML\")\r\n\r\nlibrary(mgcv)\r\n# Fit the model\r\nmod <- gam(hw.mpg ~ s(length) + s(width) + s(height) + s(weight), \r\n           data = mpg, method = \"REML\")\r\n\r\n# Check overall concurvity\r\nconcurvity(mod, full = FALSE)"}},{"node":{"name":"solution_03_03","code":"library(mgcv)\r\ndata(meuse, package=\"sp\")\r\n\r\n# Fit the model\r\nmod2da <- gam(cadmium ~ s(x, y) + s(dist) + s(elev), \r\n              data = meuse, method = \"REML\")\r\n\r\n# Inspect the model\r\nsummary(mod2da)\r\n"}},{"node":{"name":"solution_03_05_1","code":"# 3D surface plot\r\nplot(mod2da, scheme = 1, pages = 1)\r\n"}},{"node":{"name":"solution_03_02_1","code":"library(mgcv)\r\ndata(meuse, package=\"sp\")\r\n\r\n# Fit the model\r\nmod2da <- gam(cadmium ~ s(x, y) + s(dist) + s(elev), \r\n              data = meuse, method = \"REML\")\r\n\r\n# Inspect the model\r\nsummary(mod2da)"}},{"node":{"name":"solution_03_06","code":"data(meuse, package=\"sp\")\r\nlibrary(mgcv)\r\nmod2d <- gam(cadmium ~ s(x,y), data=meuse, method = \"REML\")\r\n\r\n# Make the perspective plot with error surfaces\r\nvis.gam(mod2d, view = c(\"x\", \"y\"), \r\n        plot.type = \"persp\", se = 2)\r\n"}},{"node":{"name":"solution_03_05_2","code":"# Colored heat map\r\nplot(mod2da, scheme = 2, pages = 1)\r\n"}},{"node":{"name":"solution_03_06_1","code":"# Rotate the same plot\r\nvis.gam(mod2d, view = c(\"x\", \"y\"), \r\n        plot.type = \"persp\", se = 2, theta = 135)"}},{"node":{"name":"solution_03_06_2","code":"# Rotate the same plot\r\nvis.gam(mod2d, view = c(\"x\", \"y\"), \r\n        plot.type = \"persp\", se = 2, theta = 135)\r\n"}},{"node":{"name":"solution_03_07","code":"data(meuse, package=\"sp\")\r\nlibrary(mgcv)\r\nmod2d <- gam(cadmium ~ s(x,y), data=meuse, method = \"REML\")\r\n\r\n# Make plot with 5% extrapolation\r\nvis.gam(mod2d, view = c(\"x\", \"y\"), \r\n        plot.type = \"contour\", too.far = 0.05)\r\n\r\n# Overlay data\r\npoints(meuse)"}},{"node":{"name":"solution_03_07_1","code":"# Make plot with 10% extrapolation\r\nvis.gam(mod2d, view = c(\"x\", \"y\"), \r\n        plot.type = \"contour\", too.far = 0.1)\r\n\r\n# Overlay data\r\npoints(meuse)"}},{"node":{"name":"solution_03_07_2","code":"# Make plot with 25% extrapolation\r\nvis.gam(mod2d, view = c(\"x\", \"y\"), \r\n        plot.type = \"contour\", too.far = 0.25)\r\n\r\n# Overlay data\r\npoints(meuse)\r\n"}},{"node":{"name":"solution_03_09","code":"library(mgcv)\r\ndata(meuse, package=\"sp\")\r\n\r\n# Fit a model with separate smooths for each land-use level\r\nmod_sep <- gam(copper ~ s(dist, by = landuse) + landuse, \r\n               data = meuse, method = \"REML\")\r\n\r\n# Examine the summary\r\n"}},{"node":{"name":"solution_03_09_1","code":"# Fit a model with factor-smooth interaction\r\nmod_fs <- gam(copper ~ s(dist, landuse, bs = \"fs\"), \r\n              data = meuse, method = \"REML\")\r\n\r\n# Examine the summary\r\nsummary(mod_fs)"}},{"node":{"name":"solution_03_10","code":"data(meuse, package=\"sp\")\r\nlibrary(mgcv)\r\nmod_sep <- gam(copper ~ s(dist, by=landuse), data=meuse, method = \"REML\")\r\nmod_fs <- gam(copper ~ s(dist, landuse, bs=\"fs\"), data=meuse, method = \"REML\")\r\n\r\n# Plot both the models with plot()\r\nplot(mod_sep, pages = 1)\r\nplot(mod_fs, pages = 1)\r\n\r\n"}},{"node":{"name":"solution_03_10_1","code":"# Plot both the models with vis.gam()\r\nvis.gam(mod_sep, view = c(\"dist\", \"landuse\"), plot.type = \"persp\")\r\nvis.gam(mod_fs, view = c(\"dist\", \"landuse\"), plot.type = \"persp\")"}},{"node":{"name":"solution_03_12","code":"library(mgcv)\r\ndata(meuse, package=\"sp\")\r\n\r\n# Fit the model\r\ntensor_mod <- gam(cadmium ~ te(x, y, elev), \r\n                  data = meuse, method = \"REML\")\r\n\r\n# Summarize and plot\r\nsummary(tensor_mod)\r\nplot(tensor_mod)\r\n"}},{"node":{"name":"solution_03_13","code":"library(mgcv)\r\ndata(meuse, package=\"sp\")\r\n\r\n# Fit the model\r\ntensor_mod2 <- gam(cadmium ~ s(x, y) + s(elev) + ti(x, y, elev), \r\n                   data = meuse, method = \"REML\")\r\n\r\n# Summarize and plot\r\nsummary(tensor_mod2)\r\nplot(tensor_mod2, pages = 1)\r\n"}},{"node":{"name":"solution_04_02","code":"library(mgcv)\r\ncsale <- readRDS(url(\"https://assets.datacamp.com/production/repositories/1786/datasets/cad8c6b369fb6bfbdbae6b17c01df88e1bd336c4/csale.rds\"))\r\nlog_mod <- gam(purchase ~ s(mortgage_age), data = csale, \r\n               family = binomial, \r\n               method = \"REML\")\r\n\t\t\t   \r\n# Examine the csale data frame\r\nhead(csale)\r\nstr(csale)\r\n\r\n# Fit a logistic model\r\nlog_mod <- gam(purchase ~ s(mortgage_age), data = csale, \r\n               family = binomial, \r\n               method = \"REML\")"}},{"node":{"name":"solution_04_03","code":"csale <- readRDS(url(\"https://assets.datacamp.com/production/repositories/1786/datasets/cad8c6b369fb6bfbdbae6b17c01df88e1bd336c4/csale.rds\"))\r\nlibrary(mgcv)\r\nlog_mod2 <- gam(purchase ~ s(n_acts) + s(bal_crdt_ratio) + s(avg_prem_balance) + s(retail_crdt_ratio) + s(avg_fin_balance)  + s(mortgage_age) + s(cred_limit),\r\n              data = csale,\r\n              family = binomial,\r\n              method = \"REML\")\r\n\t\t\t  \r\n# Fit a logistic model\r\nlog_mod2 <- gam(purchase ~ s(n_acts) + s(bal_crdt_ratio) + \r\n                  s(avg_prem_balance) + s(retail_crdt_ratio) +\r\n                  s(avg_fin_balance)  + s(mortgage_age) +\r\n                  s(cred_limit),\r\n                data = csale,\r\n                family = binomial,\r\n                method = \"REML\")\r\n\r\n# View the summary\r\nsummary(log_mod2)\r\n\r\n"}},{"node":{"name":"solution_04_05","code":"csale <- readRDS(url(\"https://assets.datacamp.com/production/repositories/1786/datasets/cad8c6b369fb6bfbdbae6b17c01df88e1bd336c4/csale.rds\"))\r\nset.seed(0)\r\nlibrary(mgcv)\r\nlog_mod2 <- gam(purchase ~ s(n_acts) + s(bal_crdt_ratio) +\r\n                \t\t   s(avg_prem_balance) + s(retail_crdt_ratio) +\r\n                           s(avg_fin_balance)  + s(mortgage_age) + s(cred_limit),\r\n              data = csale,\r\n              family = binomial,\r\n              method = \"REML\")\r\n\r\n# Plot on the log-odds scale\r\nplot(log_mod2, pages = 1)"}},{"node":{"name":"solution_04_05_2","code":"# Plot with the intercept\r\nplot(log_mod2, pages = 1, trans = plogis, \r\n     shift = coef(log_mod2)[1])"}},{"node":{"name":"solution_04_05_1","code":"# Plot on the probability scale\r\nplot(log_mod2, pages = 1, trans = plogis)\r\n"}},{"node":{"name":"solution_04_10_1","code":"# Calculate predictions and errors\r\npredictions <- predict(log_mod2, newdata = new_credit_data, \r\n                       type = \"link\", se.fit=TRUE)\r\n\r\n# Calculate high and low predictions intervals\r\nhigh_pred <- predictions$fit + 2*predictions$se.fit\r\nlow_pred <- predictions$fit - 2*predictions$se.fit\r\n"}},{"node":{"name":"solution_04_05_3","code":"# Plot with intercept uncertainty\r\nplot(log_mod2, pages = 1, trans = plogis, \r\n     shift = coef(log_mod2)[1], seWithMean = TRUE)"}},{"node":{"name":"solution_04_10_2","code":"# Calculate predictions and errors\r\npredictions <- predict(log_mod2, newdata = new_credit_data, \r\n                       type = \"link\", se.fit=TRUE)\r\n\r\n# Calculate high and low predictions intervals\r\nhigh_pred <- predictions$fit + 2*predictions$se.fit\r\nlow_pred <- predictions$fit - 2*predictions$se.fit\r\n\r\n# Convert intervals to probability scale\r\nhigh_prob <- plogis(high_pred)\r\nlow_prob <- plogis(low_pred)\r\n\r\nhigh_prob\r\nlow_prob"}},{"node":{"name":"solution_04_10","code":"library(mgcv)\r\ncsale <- readRDS(url(\"https://assets.datacamp.com/production/repositories/1786/datasets/3331154338220d6597187e3c7bc1e5b7ec064858/csale.rds\"))\r\nnew_credit_data <- readRDS(url(\"https://assets.datacamp.com/production/repositories/1786/datasets/c76599b99a7f00c8b7f74ca7765b2186216b0dde/new_credit_data.rds\"))\r\nlog_mod2 <- gam(purchase ~ s(n_acts) + s(bal_crdt_ratio) +\r\n                \t\t   s(avg_prem_balance) + s(retail_crdt_ratio) +\r\n                           s(avg_fin_balance)  + s(mortgage_age) + s(cred_limit),\r\n              data = csale,\r\n              family = binomial,\r\n              method = \"REML\")\r\n\t\t\t  \r\n# Calculate predictions and errors\r\npredictions <- predict(log_mod2, newdata = new_credit_data, \r\n                       type = \"link\", se.fit = TRUE)\r\n\r\n# Inspect the predictions\r\npredictions"}},{"node":{"name":"test_01_02","code":"test <- function() {\r\n    # This function is defined in the testTemplate\r\n    success(\"Good work! As you can see, the linear model does a poor job fitting this data, which clearly has a nonlinear pattern.\")\r\n}\r\n"}},{"node":{"name":"solution_04_11","code":"library(mgcv)\r\ncsale <- readRDS(url(\"https://assets.datacamp.com/production/repositories/1786/datasets/3331154338220d6597187e3c7bc1e5b7ec064858/csale.rds\"))\r\nnew_credit_data <- readRDS(url(\"https://assets.datacamp.com/production/repositories/1786/datasets/c76599b99a7f00c8b7f74ca7765b2186216b0dde/new_credit_data.rds\"))\r\nlog_mod2 <- gam(purchase ~ s(n_acts) + s(bal_crdt_ratio) +\r\n                \t\t   s(avg_prem_balance) + s(retail_crdt_ratio) +\r\n                           s(avg_fin_balance)  + s(mortgage_age) + s(cred_limit),\r\n              data = csale,\r\n              family = binomial,\r\n              method = \"REML\")\r\n\r\n# Predict from the model\r\nprediction_1 <- predict(log_mod2, \r\n                        newdata = new_credit_data[1, ], \r\n                        type = \"terms\")\r\n\r\n# Inspect\r\nprediction_1\r\n"}},{"node":{"name":"test_01_03","code":"test <- function() {\r\n    # This function is defined in the testTemplate\r\n    success(\"Lovely! The GAM model is much better at fitting these data because it can capture the nonlinear relationships between the variables.\")\r\n}\r\n"}},{"node":{"name":"test_01_04","code":"test <- function() {\r\n    # This function is defined in the testTemplate\r\n    success(\"Good work! As you can see, the linear model does a poor job fitting this data, which clearly has a nonlinear pattern.\")\r\n}\r\n"}},{"node":{"name":"test_01_06","code":"test <- function() {\r\n    # This function is defined in the testTemplate\r\n    success(\"Nice! See how the GAM with only three basis functions is much simpler, and doesn't model the complexity in the data. 20 basis functions, though, is enough to capture this relationship.\")\r\n}\r\n"}},{"node":{"name":"test_01_07","code":"test <- function() {\r\n    # This function is defined in the testTemplate\r\n    success(\"Terrific! See how the model with `sp = 0.1` is much smoother, while the one with `sp = 0.0001` fits most wiggles in the data.  Note that these both have the same number of basis functions - the smoothing parameter `sp` calibrates the overall complexity with the bounds allowed by `k`.\")\r\n}\r\n"}},{"node":{"name":"test_01_08","code":"test <- function() {\r\n    # This function is defined in the testTemplate\r\n    success(\"Wow! Look how wiggly that model is!  When `k` is high and `s` is too low to smooth the model, it ends up overfitting the data.\")\r\n}\r\n"}},{"node":{"name":"test_01_10","code":"test <- function() {\r\n    # This function is defined in the testTemplate\r\n    success(\"High five! Look at the plot for the `price` term - it's completely linear. Automatic smoothing found that a linear relationship was a better fit than anything wiggly.\")\r\n}\r\n"}},{"node":{"name":"test_01_12","code":"test <- function() {\r\n    # This function is defined in the testTemplate\r\n    success(\"\"Great work! You're already fitting some very complex models. In the next chapter, you'll learn about interpreting and visualizing your results.\")\r\n}\r\n"}},{"node":{"name":"test_01_11","code":"test <- function() {\r\n    # This function is defined in the testTemplate\r\n    success(\"Nice! You've fit models with multiple smooth terms and models with smooth and categorical terms. Now let's fit a model with smooths that vary by category.\")\r\n}\r\n"}},{"node":{"name":"test_02_02","code":"test <- function() {success('Well done!')}\r\n\r\n"}},{"node":{"name":"test_02_05","code":"test <- function() {success(\"Looking good! Plotting residuals helps you understand the quality of your model fit. Now let's try selecting different parts of your model to visualize.\")}\r\n\r\n"}},{"node":{"name":"test_02_12","code":"test <- function() {success('Well done!')}\r\n\r\n"}},{"node":{"name":"test_02_06","code":"test <- function() {success(\"Nice! A plot like this gives a good overview of everything going on in the model.\")}\r\n\r\n"}},{"node":{"name":"test_02_07","code":"test <- function() {success(\"Lovely! This plot is very helpful for explaining or interpreting models results. Incorporating the intercept into the partial effect plot makes the Y-axis naturally interpretable.\")}\r\n\r\n"}},{"node":{"name":"test_02_10","code":"test <- function() {success(\"Good job! As you can see, model-fitting is often an iterative process of fitting and checking.\")}\r\n\r\n"}},{"node":{"name":"test_02_09","code":"test <- function() {success('Well done!')}\r\n\r\n"}},{"node":{"name":"test_03_02_1","code":"test <- function() {success(\"Excellent.  Models of this form (`s(x,y) + s(v1) + ...`) are a great way to model spatial data because they incorporate spatial relationships as well as independent predictors.  Now let's learn how to visualize them.\")}\r\n\r\n"}},{"node":{"name":"test_03_02","code":"test <- function() {success('Well done!')}\r\n\r\n"}},{"node":{"name":"test_02_13","code":"test <- function() {success('Well done!')}\r\n\r\n"}},{"node":{"name":"test_03_03","code":"test <- function() {success(\"Excellent.  Models of this form (`s(x,y) + s(v1) + ...`) are a great way to model spatial data because they incorporate spatial relationships as well as independent predictors.  Now let's learn how to visualize them.\")}\r\n\r\n"}},{"node":{"name":"test_03_05_1","code":"test <- function() {success('Well done!')}\r\n\r\n"}},{"node":{"name":"test_03_05_3","code":"test <- function() {success('Well done!')}\r\n\r\n"}},{"node":{"name":"test_03_05","code":"test <- function() {success('Well done!')}\r\n\r\n"}},{"node":{"name":"test_03_05_2","code":"test <- function() {success(\"How pretty! These schemes give you some quick options for plotting interactions as part of models. Now, let's customize some 2-D plots.\")}\r\n\r\n"}},{"node":{"name":"test_03_06_1","code":"test <- function() {success('Lookin' good! We often have to rotate surface plots to get a full idea of their shape')}\r\n\r\n"}},{"node":{"name":"test_03_06","code":"test <- function() {success('Well done!')}\r\n\r\n"}},{"node":{"name":"test_03_06_2","code":"test <- function() {success(\"Lookin' good! We often have to rotate surface plots to get a full idea of their shape.\")}\r\n\r\n"}},{"node":{"name":"test_03_07","code":"test <- function() {success('Well done!')}\r\n\r\n"}},{"node":{"name":"test_03_07_1","code":"test <- function() {success('Well done!')}\r\n\r\n"}},{"node":{"name":"test_03_07_2","code":"test <- function() {success(\"Nice! You can see from the progression of plots how extrapolation changes the impression of the extent of model support. When presenting such model results, it's always important to be aware of the ranges of data supporting the model.\")}\r\n\r\n"}},{"node":{"name":"test_03_09_1","code":"test <- function() {success('Good job! Let's visualize these models to better understand the differences.')}\r\n\r\n"}},{"node":{"name":"test_03_10","code":"test <- function() {success('Well done!')}\r\n\r\n"}},{"node":{"name":"test_03_12","code":"test <- function() {success('Ooo nice! Look at the output plot for your 3-variable tensor model. To visulize a 3-variable interaction, mgcv plots 2D \"slices\" of the 2-way interaction at different levels of the third variable.')}\r\n\r\n"}},{"node":{"name":"test_03_09","code":"test <- function() {success('Well done!')}\r\n\r\n"}},{"node":{"name":"test_03_10_1","code":"test <- function() {success(\"Very nice! Flip back and forth between the last two plots you made.  Note the `fs` model has fewer wild swings - it is more stable for models where some categories have few data points, though we don't get statistics on the individual smooths in this case.\")}\r\n\r\n"}},{"node":{"name":"test_03_13","code":"test <- function() {success(\"Excellent! Look at your plots. You can see how horizontal space elevation have independent effects, but we still capture the interaction of all the terms.\")}\r\n\r\n"}},{"node":{"name":"test_04_02","code":"test <- function() {success('Well done!')}\r\n\r\n"}},{"node":{"name":"test_04_03","code":"test <- function() {success('Well done!')}\r\n\r\n"}},{"node":{"name":"test_04_05_2","code":"test <- function() {success(\"Terrific! Each transformation brings us to a more interpretable output. Next, you'll answer some questions based on these plots.\")}\r\n\r\n"}},{"node":{"name":"test_04_05","code":"test <- function() {success('Well done!')}\r\n\r\n"}},{"node":{"name":"test_04_05_1","code":"test <- function() {success('Well done!')}\r\n\r\n"}},{"node":{"name":"test_04_05_3","code":"test <- function() {success('Well done!')}\r\n\r\n"}},{"node":{"name":"test_04_10","code":"test <- function() {success('Well done!')}\r\n\r\n"}},{"node":{"name":"test_04_10_1","code":"test <- function() {success('Well done!')}\r\n\r\n"}},{"node":{"name":"test_04_10_3","code":"test <- function() {success('Well done!')}\r\n\r\n"}},{"node":{"name":"test_04_11_1","code":"test <- function() {success('Well done!')}\r\n\r\n"}},{"node":{"name":"test_04_11","code":"test <- function() {success('Well done!')}\r\n\r\n"}},{"node":{"name":"test_04_10_2","code":"test <- function() {success(\"Excellent! See how the range of predictions never fall outside zero and one when you calculate intervals _before_ converting to probability?\")}\n\n"}}]}}}